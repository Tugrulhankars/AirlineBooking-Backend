package org.airlinebooking.airlinebooking.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.airlinebooking.airlinebooking.exceptions.CustomAuthenticationEntryPoint;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.AuthenticationException;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
@RequiredArgsConstructor
@Slf4j
public class AuthFilter extends OncePerRequestFilter {
    private final JwtUtils jwtUtils;
    private final CustomUserDetailsService customUserDetailsService;
    private final CustomAuthenticationEntryPoint customAuthenticationEntryPoint;
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        String token=getTokenFromRequest(request);
        if (token!=null){
            String email;
            try {
                email=jwtUtils.generateToken(token);
            }catch (Exception ex){
                AuthenticationException authenticationException=new BadCredentialsException(ex.getMessage());
                customAuthenticationEntryPoint.commence(request,response,authenticationException);
                return;
            }
        }
    }

    private String getTokenFromRequest(HttpServletRequest request){
        String tokenWithBearer=request.getHeader("Authorization");
        if (tokenWithBearer!=null && tokenWithBearer.startsWith("Bearer ")){
            return tokenWithBearer.substring(7);
        }
        return null;
    }
}
